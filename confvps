#!/bin/bash
cor[1]="\033[1;33m"
cor[2]="\033[1;32m"
cor[3]="\033[1;33m"
cor[4]="\033[1;34m"
cor[5]="\033[1;35m"
cor[6]="\033[1;36m"
cor[7]="\033[1;37m"
fin="\033m"
[[ -e /etc/bash.bashrc-bakup ]] && _autorun="\033[1;37m[\033[1;32mON\033[1;37m]" || _autorun="\033[1;37m[\033[1;31mOFF\033[1;37m]"
ip=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -oE '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
echo "$ip" >IPMENU
barra="\033[1;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[1;37m"
b="\033[1;31m"
v="\033[1;32m"
Ver="\033[1;36m"
fun_bar () {
comando[0]="$1"
comando[1]="$2"
 (
[[ -e $HOME/fim ]] && rm $HOME/fim
${comando[0]} -y > /dev/null 2>&1
${comando[1]} -y > /dev/null 2>&1
touch $HOME/fim
 ) > /dev/null 2>&1 &
sp="/-\|"
unset a
while [[ ! -e $HOME/fim ]]; do
  for((i=0; i<5; i++)); do
    echo -ne "\033[1;33m ["
    a+="#"
    echo -ne "\033[1;31m${a}"
    echo -ne "\033[1;33m]"
    echo -ne " - \033[1;33m[\033[1;32m"
    echo -ne "${sp:i%${#sp}:1}"
    echo -e "\033[1;33m]"
    sleep 1
    tput cuu1
    tput dl1
  done
done
echo -e " \033[1;33m[\033[1;31m${a}\033[1;33m] - \033[1;33m[\033[1;32m100%\033[1;33m]\033[0m"
rm $HOME/fim
}


gestor_fun () {
echo -e " \033[1;32m Administrador VPS"
echo -e "$barra"
while true; do
echo -e "${cor[7]}[${cor[1]}04${cor[7]}] \033[0;32m>${cor[6]} Atualizar pacotes"
echo -e "${cor[7]}[${cor[1]}04${cor[7]}] \033[0;32m>${cor[6]} Alterar o nome do VPS"
echo -e "${cor[7]}[${cor[1]}04${cor[7]}] \033[0;32m>${cor[6]} Reiniciar os Serviços"
echo -e "${cor[7]}[${cor[1]}04${cor[7]}] \033[0;32m>${cor[6]} Reiniciar VPS"
echo -e "${cor[7]}[${cor[1]}04${cor[7]}] \033[0;32m>${cor[6]} Regresar" && echo -e "$barra"
while [[ ${opx} != @(0|[1-5]) ]]; do
echo -ne "${cor[2]} Digite a Opcao: \033[1;37m" && read opx
tput cuu1 && tput dl1
done
case $opx in
	0)
	return;;
	1)
	update_pak
	break;;
	2)
	host_name
	break;;
	3)
	reiniciar_ser
	break;;
	4)
	reiniciar_vps
	break;;
esac
done
}

Banmer () {
chk=$(cat /etc/ssh/sshd_config | grep Banner)
if netstat -nltp|grep 'dropbear' > /dev/null;then
	echo 'DROPBEAR_BANNER="/etc/default/banner"' >>  /etc/default/dropbear
	local="/etc/dropbear/banner"
elif [ "$(echo "$chk" | grep -v "#Banner" | grep Banner)" != "" ]; then
	local=$(echo "$chk" |grep -v "#Banner" | grep Banner | awk '{print $2}')
else
	echo "Banner /etc/bannerssh" >> /etc/ssh/sshd_config
	local="/etc/bannerssh"
fi
echo -e "\E[44;1;37m    BANNER VPS-BARBA             \E[0m"
echo ""
echo -e "\033[1;33m[\033[0;34m1\033[1;33m]\033[0;36m AÑADIR BANNER"
echo -e "\033[1;33m[\033[0;34m2\033[1;33m]\033[0;36m ELIMINAR BANNER"
echo -e "\033[1;33m[\033[0;34m3\033[1;33m]\033[0;36m [VOLVER / SALIR]"
echo ""
echo -ne "\033[1;33mSELECCIONE UNA OPCION\033[1;32m --->>\033[1;37m : "; read resp
if [[ "$resp" = "1" ]]; then
echo ""
echo -ne "\033[1;33mCUAL ES SU MENSAJE \033[1;32m --->>\033[1;37m : "; read msg1
if [[ -z "$msg1" ]]; then
	echo -e "\n\033[1;34mCAMPO VACIO O INVALIDO !\033[0m"
	sleep 2
	banner
fi
echo ""
echo -e "\033[1;33m[\033[0;34m01\033[1;33m]\033[1;36m AZUL"
echo -e "\033[1;33m[\033[0;34m02\033[1;33m]\033[1;36m VERDE"
echo -e "\033[1;33m[\033[0;34m03\033[1;33m]\033[1;36m VERDE-CLARO"
echo -e "\033[1;33m[\033[0;34m04\033[1;33m]\033[1;36m AMARILLO"
echo -e "\033[1;33m[\033[0;34m05\033[1;33m]\033[1;36m ROSA"
echo -e "\033[1;33m[\033[0;34m06\033[1;33m]\033[1;36m MARRON"
echo -e "\033[1;33m[\033[0;34m07\033[1;33m]\033[1;36m ANARANJADO"
echo -e "\033[1;33m[\033[1;34m08\033[1;33m]\033[1;36m ROJO"
echo -e "\033[1;33m[\033[1;34m09\033[1;33m]\033[1;36m NEGRO"
echo -e "\033[1;33m[\033[1;34m10\033[1;33m]\033[1;36m SIN COLOR"
echo ""
echo -ne "\033[1;33mELIJA UN COLOR \033[1;32m --->>\033[1;37m : "; read ban_cor
if [[ "$ban_cor" = "1" ]] || [[ "$ban_cor" = "01" ]]; then
echo "<h5><font color='blue'>$msg1" >> $local
elif [[ "$ban_cor" = "2" ]] || [[ "$ban_cor" = "02" ]]; then
echo "<h5><font color='green'>$msg1" >> $local
elif [[ "$ban_cor" = "3" ]] || [[ "$ban_cor" = "03" ]]; then
echo "<h5><font color='red'>$msg1" >> $local
elif [[ "$ban_cor" = "4" ]] || [[ "$ban_cor" = "04" ]]; then
echo "<h5><font color='yellow'>$msg1" >> $local
elif [[ "$ban_cor" = "5" ]] || [[ "$ban_cor" = "05" ]]; then
echo "<h5><font color='#F535AA'>$msg1" >> $local
elif [[ "$ban_cor" = "6" ]] || [[ "$ban_cor" = "06" ]]; then
echo "<h5><font color='cyan'>$msg1" >> $local
elif [[ "$ban_cor" = "7" ]] || [[ "$ban_cor" = "07" ]]; then
echo "<h5><font color='#FF7F00'>$msg1" >> $local
elif [[ "$ban_cor" = "8" ]] || [[ "$ban_cor" = "08" ]]; then
echo "<h5><font color='#9932CD'>$msg1" >> $local
elif [[ "$ban_cor" = "9" ]] || [[ "$ban_cor" = "09" ]]; then
echo "<h5><font color='black'>$msg1" >> $local
elif [[ "$ban_cor" = "10" ]]; then
echo "<h5>$msg1</h5>" >> $local
service ssh restart > /dev/null 2>&1
echo -e "\n\033[1;32mBANNER CREADO !\033[0m"
sleep 2
menu
else
echo -e "\n\033[1;31mOPCION INVALIDA !\033[0m"
	sleep 2
	banner
fi
echo '</font></h5>' >> $local
service ssh restart > /dev/null 2>&1
echo -e "\n\033[1;32mBANNER CREADO !\033[0m"
unset ban_cor
elif [[ "$resp" = "2" ]]; then
	echo " " > $local
	echo -e "\n\033[1;32mBANNER ELIMINADO !\033[0m"
	service ssh restart > /dev/null 2>&1
	sleep 2
	menu
elif [[ "$resp" = "3" ]]; then
	menu
else
	echo -e "\n\033[1;31mOPCION INVALIDA!\033[0m"
	sleep 2
	banner
fi
}
fun_ip () {
MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
[[ "$MEU_IP" != "$MEU_IP2" ]] && IP="$MEU_IP2" || IP="$MEU_IP"
}
#ETHOOL SSH
fun_eth () {
eth=$(ifconfig | grep -v inet6 | grep -v lo | grep -v 127.0.0.1 | grep "encap:Ethernet" | awk '{print $1}')
[[ $eth != "" ]] && {
    echo -e "$barra"
    echo -e "${cor[3]} Aplicar Sistema Para Mejorar Paquetes Ssh?"
    echo -e "${cor[3]} Opcion Para Usuarios Avanzados"
    echo -e "$barra"
    read -p "[S/N]: " -e -i n sshsn
    tput cuu1 && tput dl1
           [[ "$sshsn" = @(s|S|y|Y) ]] && {
           echo -e "${cor[1]} Correccion de problmas de paquetes  SSH..."
           echo -e "Cual Es La Taza RX"
           echo -ne "[ 1 - 999999999 ]: "; read rx
           [[ "$rx" = "" ]] && rx="999999999"
           echo -e "Cual Es La Taza RX"
           echo -ne "[ 1 - 999999999 ]: "; read tx
           [[ "$tx" = "" ]] && tx="999999999"
           apt-get install ethtool -y > /dev/null 2>&1
           ethtool -G $eth rx $rx tx $tx > /dev/null 2>&1
           echo -e "$barra"
           }
     }
}
telegran_bot () {
if [[ "$(ps x | grep "ultimatebot" | grep -v "grep")" = "" ]]; then
read -p " TELEGRAN BOT TOKEN: " tokenxx
read -p " TELEGRAN BOT LOGUIN: " loguin
read -p " TELEGRAN BOT PASS: " pass
read -p " BOT LINGUAGE [pt/es/en/fr]: " lang
echo -e "${barra}"
echo -e "${loguin}:${pass}" > ./bottokens
screen -dmS screen bash ./ultimatebot "$tokenxx" "$lang" > /dev/null 2>&1
echo -e " LOADING BOT, WAIT"
sleep 10s
echo -e " RUNNING"
echo -e "${barra}"
else
kill -9 $(ps x | grep "ultimatebot" | grep -v "grep" | awk '{print $1}') > /dev/null 2>&1
[[ -e ./bottokens ]] && rm ./bottokens
echo -e "${barra}"
echo -e " BOT STOPED"
echo -e "${barra}"
fi
return 0
}
fun_dropbear () {
 [[ -e /etc/default/dropbear ]] && {
 echo -e "\033[1;32m ELIMINANDO DROPBEAR\n$barra"
 service dropbear stop & >/dev/null 2>&1
 fun_bar "apt-get remove dropbear -y"
 echo -e "$barra\n\033[1;32m Dropbear ELIMINADO\n$barra"
 [[ -e /etc/default/dropbear ]] && rm /etc/default/dropbear
 return 0
 }
echo -e "\033[1;32m DROPBEAR VPS-BARBA\n$barra"
echo -e "\033[1;31m Escriba los Puertos en Orden Consecutivo:\033[1;32m 53 O 443\033[1;37m"
echo -e "$barra"
echo -ne "\033[1;31m Escriba Los Puertos: \033[1;37m" && read DPORT
tput cuu1 && tput dl1
TTOTAL=($DPORT)
    for((i=0; i<${#TTOTAL[@]}; i++)); do
        [[ $(mportas|grep "${TTOTAL[$i]}") = "" ]] && {
        echo -e "\033[1;33m Puerto Escogido:\033[1;32m ${TTOTAL[$i]} OK"
        PORT="$PORT ${TTOTAL[$i]}"
        } || {
        echo -e "\033[1;33m Puerto Escogido:\033[1;31m ${TTOTAL[$i]} FALLO"
        }
   done
  [[  -z $PORT ]] && {
  echo -e "\033[1;31m Ningun  Puerto Valido\033[0m"
  return 1
  }
sysvar=$(cat -n /etc/issue |grep 1 |cut -d' ' -f6,7,8 |sed 's/1//' |sed 's/      //' | grep -o Ubuntu)
shells=$(cat /etc/shells|grep "/bin/false")
[[ ! ${shells} ]] && echo -e "/bin/false" >> /etc/shells
[[ "$sysvar" != "" ]] && {
echo -e "Port 22
Protocol 2
KeyRegenerationInterval 3600
ServerKeyBits 1024
SyslogFacility AUTH
LogLevel INFO
LoginGraceTime 120
PermitRootLogin yes
StrictModes yes
RSAAuthentication yes
PubkeyAuthentication yes
IgnoreRhosts yes
RhostsRSAAuthentication no
HostbasedAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
PasswordAuthentication yes
X11Forwarding yes
X11DisplayOffset 10
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
#UseLogin no
AcceptEnv LANG LC_*
Subsystem sftp /usr/lib/openssh/sftp-server
UsePAM yes" > /etc/ssh/sshd_config
echo -e "${cor[2]} Instalando dropbear"
echo -e "$barra"
fun_bar "apt-get install dropbear -y"
echo -e "$barra"
touch /etc/dropbear/banner
echo -e "${cor[2]} Configurando dropbear"
echo -e "NO_START=0" > /etc/default/dropbear
echo -e 'DROPBEAR_EXTRA_ARGS="-p 443"' >> /etc/default/dropbear
echo -e 'DROPBEAR_BANNER="/etc/dropbear/banner"' >> /etc/default/dropbear
echo -e "DROPBEAR_RECEIVE_WINDOW=65536" >> /etc/default/dropbear
} || {
echo -e "Port 22
Protocol 2
KeyRegenerationInterval 3600
ServerKeyBits 1024
SyslogFacility AUTH
LogLevel INFO
LoginGraceTime 120
PermitRootLogin yes
StrictModes yes
RSAAuthentication yes
PubkeyAuthentication yes
IgnoreRhosts yes
RhostsRSAAuthentication no
HostbasedAuthentication no
PermitEmptyPasswords no
ChallengeResponseAuthentication no
PasswordAuthentication yes
X11Forwarding yes
X11DisplayOffset 10
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
#UseLogin no
AcceptEnv LANG LC_*
Subsystem sftp /usr/lib/openssh/sftp-server
UsePAM yes" > /etc/ssh/sshd_config
echo -e "${cor[2]}Instalando dropbear"
echo -e "$barra"
fun_bar "apt-get install dropbear -y"
touch /etc/dropbear/banner
echo -e "$barra"
echo -e "${cor[2]} Configurando dropbear"
echo -e "NO_START=0" > /etc/default/dropbear
echo -e 'DROPBEAR_EXTRA_ARGS="-p 443"' >> /etc/default/dropbear
echo -e 'DROPBEAR_BANNER="/etc/dropbear/banner"' >> /etc/default/dropbear
echo -e "DROPBEAR_RECEIVE_WINDOW=65536" >> /etc/default/dropbear
}
fun_eth
service ssh restart > /dev/null 2>&1
service dropbear restart > /dev/null 2>&1
echo -e "$barra\n${cor[3]} Seu dropbear foi configurado com sucesso\n$barra"
#UFW
for ufww in $(mportas|awk '{print $2}'); do
ufw allow $ufww > /dev/null 2>&1
done
}

fun_squid  () {
  if [[ -e /etc/squid/squid.conf ]]; then
  var_squid="/etc/squid/squid.conf"
  elif [[ -e /etc/squid3/squid.conf ]]; then
  var_squid="/etc/squid3/squid.conf"
  fi
  [[ -e $var_squid ]] && {
  echo -e "\033[1;32m DESISTALANDO SQUID\n$barra"
  service squid stop > /dev/null 2>&1
  fun_bar "apt-get remove squid3 -y"
  echo -e "$barra\n\033[1;32m Proceso Terminado\n$barra"
  [[ -e $var_squid ]] && rm $var_squid
  return 0
  }
echo -e "\033[1;33m SQUID VPS-BARBA\n$barra"
fun_ip
echo -ne "\033[1;32m Confirme su ip\033[1;37m"; read -p ": " -e -i $IP ip
echo -e "$barra"
echo -e "\033[1;32m Ahora Seleccione los Puertos que Desea\033[0m"
echo -e "\033[1;37m Seleccione los Puertos En Orden Consecutivo\n Ejemplo:\033[1;32m 80 8080 8799 3128\033[0m"
echo -e "$barra"
echo -ne "\033[1;33m Escriba los Puertos:\033[1;37m"; read portasx
totalporta=($portasx)
unset PORT
   for((i=0; i<${#totalporta[@]}; i++)); do
        [[ $(mportas|grep "${totalporta[$i]}") = "" ]] && {
        echo -e "\033[1;33m Puerto Seleccionado:\033[1;32m ${totalporta[$i]} OK"
        PORT+="${totalporta[$i]}\n"
        } || {
        echo -e "\033[1;33m Puerto Seleccionado:\033[1;31m ${totalporta[$i]} FAIL"
        }
   done
  [[ -z $PORT ]] && {
  echo -e "\033[1;33m Ningun Puerto Fue Escojido\033[0m"
  return 1
  }
echo -e "$barra"
echo -e " INSTALANDO SQUID"
echo -e "$barra"
fun_bar "apt-get install squid3 -y"
echo -e "$barra"
echo -e " INICIANDO CONFIGURACION"
echo -e ".bookclaro.com.br/\n.claro.com.ar/\n.claro.com.br/\n.claro.com.co/\n.claro.com.ec/\n.claro.com.gt/\n.cloudfront.net/\n.claro.com.ni/\n.claro.com.pe/\n.claro.com.sv/\n.claro.cr/\n.clarocurtas.com.br/\n.claroideas.com/\n.claroideias.com.br/\n.claromusica.com/\n.clarosomdechamada.com.br/\n.clarovideo.com/\n.facebook.net/\n.facebook.com/\n.netclaro.com.br/\n.oi.com.br/\n.oimusica.com.br/\n.speedtest.net/\n.tim.com.br/\n.timanamaria.com.br/\n.vivo.com.br/\n.rdio.com/\n.compute-1.amazonaws.com/\n.portalrecarga.vivo.com.br/\n.vivo.ddivulga.com/" > /etc/payloads
echo -e "$barra\n\033[1;32m Ahora Seleccione Una Configuracion Para Su Proxy\n$barra"
echo -e "${cor[2]}[${cor[3]}01${cor[2]}] \033[0;33m> ${cor[4]} Comun"
echo -e "${cor[2]}[${cor[3]}02${cor[2]}] \033[0;33m> ${cor[4]} Seguro -\033[1;31m Usuario Debe Ajustar\033[1;37m\n$barra"
read -p "[1/2]: " -e -i 1 proxy_opt
tput cuu1 && tput dl1
if [[ $proxy_opt = 1 ]]; then
echo -e " INSTALANDO SQUID COMUM"
elif [[ $proxy_opt = 1 ]]; then
echo -e " INSTALANDO SQUID SEGURO"
else
echo -e " INSTALANDO SQUID COMUM"
proxy_opt=1
fi
 
unset var_squid
if [[ -d /etc/squid ]]; then
var_squid="/etc/squid/squid.conf"
elif [[ -d /etc/squid3 ]]; then
var_squid="/etc/squid3/squid.conf"
fi
if [[ "$proxy_opt" = @(02|2) ]]; then
echo -e "#ConfiguracaoSquiD
acl url1 dstdomain -i $ip
acl url2 dstdomain -i 127.0.0.1
acl url3 url_regex -i '/etc/payloads'
acl url4 url_regex -i '/etc/opendns'
acl url5 dstdomain -i localhost
acl accept dstdomain -i GET
acl accept dstdomain -i POST
acl accept dstdomain -i OPTIONS
acl accept dstdomain -i CONNECT
acl accept dstdomain -i PUT
acl HEAD dstdomain -i HEAD
acl accept dstdomain -i TRACE
acl accept dstdomain -i OPTIONS
acl accept dstdomain -i PATCH
acl accept dstdomain -i PROPATCH
acl accept dstdomain -i DELETE
acl accept dstdomain -i REQUEST
acl accept dstdomain -i METHOD
acl accept dstdomain -i NETDATA
acl accept dstdomain -i MOVE
acl all src 0.0.0.0/0
http_access allow url1
http_access allow url2
http_access allow url3
http_access allow url4
http_access allow url5
http_access allow accept
http_access allow HEAD
http_access deny all
 
# Request Headers Forcing
 
request_header_access Allow allow all
request_header_access Authorization allow all
request_header_access WWW-Authenticate allow all
request_header_access Proxy-Authorization allow all
request_header_access Proxy-Authenticate allow all
request_header_access Cache-Control allow all
request_header_access Content-Encoding allow all
request_header_access Content-Length allow all
request_header_access Content-Type allow all
request_header_access Date allow all
request_header_access Expires allow all
request_header_access Host allow all
request_header_access If-Modified-Since allow all
request_header_access Last-Modified allow all
request_header_access Location allow all
request_header_access Pragma allow all
request_header_access Accept allow all
request_header_access Accept-Charset allow all
request_header_access Accept-Encoding allow all
request_header_access Accept-Language allow all
request_header_access Content-Language allow all
request_header_access Mime-Version allow all
request_header_access Retry-After allow all
request_header_access Title allow all
request_header_access Connection allow all
request_header_access Proxy-Connection allow all
request_header_access User-Agent allow all
request_header_access Cookie allow all
#request_header_access All deny all
 
# Response Headers Spoofing
 
#reply_header_access Via deny all
#reply_header_access X-Cache deny all
#reply_header_access X-Cache-Lookup deny all
 
#portas" > $var_squid
for pts in $(echo -e $PORT); do
echo -e "http_port $pts" >> $var_squid
done
echo -e "
#nome
visible_hostname ADM-MANAGER
 
via off
forwarded_for off
pipeline_prefetch off" >> $var_squid
 else
echo -e "#ConfiguracaoSquiD
acl url1 dstdomain -i $ip
acl url2 dstdomain -i 127.0.0.1
acl url3 url_regex -i '/etc/payloads'
acl url4 url_regex -i '/etc/opendns'
acl url5 dstdomain -i localhost
acl all src 0.0.0.0/0
http_access allow url1
http_access allow url2
http_access allow url3
http_access allow url4
http_access allow url5
http_access deny all
 
#portas" > $var_squid
for pts in $(echo -e $PORT); do
echo -e "http_port $pts" >> $var_squid
done
echo -e "
#nome
visible_hostname ADM-MANAGER
 
via off
forwarded_for off
pipeline_prefetch off" >> $var_squid
fi
touch /etc/opendns
fun_eth
echo -ne " \033[1;31m [ ! ] \033[1;33mREINICIANDO SERVICOS"
service squid restart > /dev/null 2>&1
service squid3 restart > /dev/null 2>&1
echo -e " \033[1;32m[OK]"
echo -e "$barra\n ${cor[3]}SQUID CONFIGURADO\n$barra"
#UFW
for ufww in $(mportas|awk '{print $2}'); do
ufw allow $ufww > /dev/null 2>&1
done
}
 
online_squid () {
payload="/etc/payloads"
echo -e "\033[1;33mSQUID CONFIGURADO\n$barra"
echo -e "${cor[2]}[${cor[3]}01${cor[2]}] \033[0;33m> ${cor[4]}AGREGAR HOST A SQUIDd"
echo -e "${cor[2]}[${cor[3]}02${cor[2]}] \033[0;33m> ${cor[4]}QUITAR HOST DE SQUID"
echo -e "${cor[2]}[${cor[3]}03${cor[2]}] \033[0;33m> ${cor[4]}DESISTALAR EL SQUID"
echo -e "${cor[2]}[${cor[3]}00${cor[2]}] \033[0;33m> ${cor[4]}REGRESAR\n$barra"
while [[ $varpay != @(0|[1-3]) ]]; do
read -p "[0/3]: " varpay
tput cuu1 && tput dl1
done
if [[ "$varpay" = "0" ]]; then
return 1
elif [[ "$varpay" = "1" ]]; then
echo -e "${cor[4]} HOST ACTUALES DENTRO DE SQUID\n$barra"
cat $payload | awk -F "/" '{print $1,$2,$3,$4}'
echo -e "$barra"
while [[ $hos != \.* ]]; do
echo -ne "${cor[4]} ESCRIBA UN NUEVO HOST: " && read hos
tput cuu1 && tput dl1
[[ $hos = \.* ]] && continue
echo -e "${cor[4]}Comece com .${cor[0]}"
sleep 2s
tput cuu1 && tput dl1
done
host="$hos/"
[[ -z $host ]] && return 1
[[ `grep -c "^$host" $payload` -eq 1 ]] &&:echo -e "${cor[4]}Host Ja Existe${cor[0]}" && return 1
echo "$host" >> $payload && grep -v "^$" $payload > /tmp/a && mv /tmp/a $payload
echo -e "${cor[4]}Host AGREGADO CON EXITO${cor[0]}\n$barra"
cat $payload | awk -F "/" '{print $1,$2,$3,$4}'
echo -e "$barra"
if [[ ! -f "/etc/init.d/squid" ]]; then
service squid3 reload
service squid3 restart
else
/etc/init.d/squid reload
service squid restart
fi
return 0
elif [[ "$varpay" = "2" ]]; then
echo -e "${cor[4]} HOST ACTUALES DENTRO DE SQUID\n$barra"
cat $payload | awk -F "/" '{print $1,$2,$3,$4}'
echo -e "$barra"
while [[ $hos != \.* ]]; do
echo -ne "${cor[4]}ESCRIBA UN HOST: " && read hos
tput cuu1 && tput dl1
[[ $hos = \.* ]] && continue
echo -e "${cor[4]}COMIENCE CON .${cor[0]}"
sleep 2s
tput cuu1 && tput dl1
done
host="$hos/"
[[ -z $host ]] && return 1
[[ `grep -c "^$host" $payload` -ne 1 ]] &&!echo -e "${cor[5]}Host Nao Encontrada" && return 1
grep -v "^$host" $payload > /tmp/a && mv /tmp/a $payload
echo -e "${cor[4]}$HOST DESISTALADO CON EXITO${cor[0]}\n$barra"
cat $payload | awk -F "/" '{print $1,$2,$3,$4}'
echo -e "$barra"
if [[ ! -f "/etc/init.d/squid" ]]; then
service squid3 reload
service squid3 restart
else
/etc/init.d/squid reload
service squid restart
fi
return 0
elif [[ "$varpay" = "3" ]]; then
fun_squid
fi
}
 
 
fun_barba () {
if [[ -e /etc/squid/squid.conf ]]; then
online_squid
elif [[ -e /etc/squid3/squid.conf ]]; then
online_squid
else
fun_squid
fi
}
 
apacheon.sh () {
declare -A cor=( [0]="\033[0m" [1]="\033[1;31m" [2]="\033[1;32m" [3]="\033[1;33m" [4]="\033[1;34m" [5]="\033[1;35m" [6]="\033[1;36m" [7]="\033[1;37m" [8]="\033[1;30m" )
barra="\033[1;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[1;37m"
fun_ip () {
MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
[[ "$MEU_IP" != "$MEU_IP2" ]] && echo "$MEU_IP2" || echo "$MEU_IP"
}
IP="$(fun_ip)"
echo -e "${cor[7]}[${cor[3]}01${cor[7]}] \033[0;32m>${cor[6]} Colocar Archivo Online"
echo -e "${cor[7]}[${cor[3]}02${cor[7]}] \033[0;32m>${cor[6]} Remover Archivo Online"
echo -e "${cor[7]}[${cor[3]}03${cor[7]}] \033[0;32m>${cor[6]} Ver Links de Archivos Online"
echo -e "${cor[7]}[${cor[3]}00${cor[7]}] \033[0;32m>${cor[6]} SALIR DEL SCRIPT"
echo -e "$barra"
while [[ ${arquivoonlineadm} != @([0-3]) ]]; do
read -p "[1-3]: " arquivoonlineadm
tput cuu1 && tput dl1
done
case ${arquivoonlineadm} in
3 | 03)
[[ -z $(ls /var/www/html) ]] && echo -e "$barra"  || {
    for my_arqs in `ls /var/www/html`; do
    [[ "$my_arqs" = "index.html" ]] && continue
    [[ "$my_arqs" = "index.php" ]] && continue
    [[ -d "$my_arqs" ]] && continue
    echo -e "\033[1;31m[$my_arqs] \033[1;36mhttp://$IP:81/$my_arqs\033[0m"
    done
    echo -e "$barra"
    }
;;
2 | 02)
i=1
[[ -z $(ls /var/www/html) ]] && echo -e "$barra"  || {
    for my_arqs in `ls /var/www/html`; do
    [[ "$my_arqs" = "index.html" ]] && continue
    [[ "$my_arqs" = "index.php" ]] && continue
    [[ -d "$my_arqs" ]] && continue
    select_arc[$i]="$my_arqs"
    echo -e "${cor[2]}[$i] > ${cor[3]}$my_arqs - \033[1;36mhttp://$IP:81/$my_arqs\033[0m"
    let i++
    done
    echo -e "$barra"
    echo -e "${cor[5]} Seleccione el archivo que desea borrar"
    echo -e "$barra"
    while [[ -z ${select_arc[$slct]} ]]; do
    read -p " [1-$i]: " slct
    tput cuu1 && tput dl1
    done
    arquivo_move="${select_arc[$slct]}"
    [[ -d /var/www/html ]] && [[ -e /var/www/html/$arquivo_move ]] && rm -rf /var/www/html/$arquivo_move > /dev/null 2>&1
    [[ -e /var/www/$arquivo_move ]] && rm -rf /var/www/$arquivo_move > /dev/null 2>&1
    echo -e "${cor[5]} exito!"
    echo -e "$barra"
    }
;;
1 | 01)
i="1"
[[ -z $(ls $HOME) ]] && echo -e "$barra"  || {
    for my_arqs in `ls $HOME`; do
    [[ -d "$my_arqs" ]] && continue
    select_arc[$i]="$my_arqs"
    echo -e "${cor[2]} [$i] > ${cor[3]}$my_arqs"
    let i++
    done
    i=$(($i - 1))
    echo -e "${cor[5]} seleccione el archivo"
    echo -e "$barra"
    while [[ -z ${select_arc[$slct]} ]]; do
    read -p " [1-$i]: " slct
    tput cuu1 && tput dl1
    done
    arquivo_move="${select_arc[$slct]}"
    [ ! -d /var ] && mkdir /var
    [ ! -d /var/www ] && mkdir /var/www
    [ ! -d /var/www/html ] && mkdir /var/www/html
    [ ! -e /var/www/html/index.html ] && touch /var/www/html/index.html
    [ ! -e /var/www/index.html ] && touch /var/www/index.html
    chmod -R 755 /var/www
    cp $HOME/$arquivo_move /var/www/$arquivo_move
    cp $HOME/$arquivo_move /var/www/html/$arquivo_move
    echo -e "\033[1;36m http://$IP:81/$arquivo_move\033[0m"
    echo -e "$barra"
    echo -e "${cor[5]} exito!"
    echo -e "$barra"
    }
;;
esac
}

mportas () {
unset portas
portas_var=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
while read port; do
var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
[[ "$(echo -e $portas|grep "$var1 $var2")" ]] || portas+="$var1 $var2\n"
done <<< "$portas_var"
i=1
echo -e "$portas"
}
update_pak () {
echo -ne " \033[1;31m[ ! ] apt-get update"
apt-get update -q > /dev/null 2>&1 && echo -e "\033[1;32m [OK]" || echo -e "\033[1;31m [FALLO]"
echo -e "$barra"
return
}
reiniciar_ser () {
echo -ne " \033[1;31m[ ! ] Services restart"
( 
[[ -e /etc/init.d/stunnel4 ]] && /etc/init.d/stunnel4 restart
[[ -e /etc/init.d/squid ]] && /etc/init.d/squid restart
[[ -e /etc/init.d/squid3 ]] && /etc/init.d/squid3 restart
[[ -e /etc/init.d/apache2 ]] && /etc/init.d/apache2 restart
[[ -e /etc/init.d/openvpn ]] && /etc/init.d/openvpn restart
[[ -e /etc/init.d/dropbear ]] && /etc/init.d/dropbear restart
[[ -e /etc/init.d/ssh ]] && /etc/init.d/ssh restart
fail2ban-client -x stop && fail2ban-client -x start
) > /dev/null 2>&1 && echo -e "\033[1;32m [OK]" || echo -e "\033[1;31m [FALLO]"
echo -e "$barra"
return
}
reiniciar_vps () {
echo -ne " \033[1;31m[ ! ] Sudo Reboot"
sleep 3s
echo -e "\033[1;32m [OK]"
(
sudo reboot
) > /dev/null 2>&1
echo -e "$barra"
return
}
host_name () {
unset name
while [[ ${name} = "" ]]; do
echo -ne "\033[1;37m Escriba nombre de host: " && read name
tput cuu1 && tput dl1
done
hostnamectl set-hostname $name 
if [ $(hostnamectl status | head -1  | awk '{print $3}') = "${name}" ]; then 
echo -e "\033[1;32m Nombre de host cambiado corretamente!, reiniciar VPS"
else
echo -e "\033[1;31m Nombre de host no fue modificado!"
fi
echo -e "$barra"
return
}

serviciosfun () {
fun_prog ()
{
        comando[0]="$1"
    ${comando[0]}  > /dev/null 2>&1 &
        tput civis
        echo -ne "\033[1;32m.\033[1;33m.\033[1;31m. \033[1;32m"
    while [ -d /proc/$! ]
        do
                for i in / - \\ \|
                do
                        sleep .1
                        echo -ne "\e[1D$i"
                done
        done
        tput cnorm
        echo -e "\e[1DOK"
}
echo -ne "\033[1;33mREINICIANDO OPENSSH "  ; fun_prog 'service ssh restart'
echo ""
sleep 1
if [[ -e /etc/squid/squid.conf ]]; then
echo -ne "\033[1;33mREINICIANDO SQUID PROXY "; fun_prog 'service squid restart'
echo ""
sleep 1
elif [[ -e /etc/squid3/squid.conf ]]; then
echo -ne "\033[1;33mREINICIANDO SQUID PROXY "; fun_prog 'service squid3 restart'
echo ""
sleep 1
fi
if [[ -e /etc/stunnel/stunnel.conf ]]; then
echo -ne "\033[1;33mREINICIANDO SSL TUNNEL "; fun_prog 'service stunnel4 restart'
echo ""
sleep 1
fi
if [[ -e /etc/init.d/dropbear ]]; then
echo -ne "\033[1;33mREINICIANDO DROPBEAR "; fun_prog 'service dropbear restart'
echo ""
sleep 1
fi
if [[ -e /etc/openvpn/server.conf ]]; then
echo -ne "\033[1;33mREINICIANDO OPENVPN "; fun_prog 'service openvpn restart'
echo ""
sleep 1
fi
if netstat -nltp|grep 'apache2' > /dev/null; then
echo -ne "\033[1;33mREINICIANDO APACHE2 "; fun_prog '/etc/init.d/apache2 restart'
echo ""
sleep 1
fi
echo -e "$barra"
echo -e "\033[1;32mSERVICIOS REINICIADOS CON EXITO!\033[0m"
echo -e "$barra"
sleep 1
}
os_system () {
system=$(echo $(cat -n /etc/issue |grep 1 |cut -d' ' -f6,7,8 |sed 's/1//' |sed 's/      //'))
echo $system|awk '{print $1, $2}'
}
 
function otimiz_server () {
echo -e "\033[1;37mLIMPANDO MEMORIA \033[1;32mRAM\033[0m"
usoram2=$(free -m | awk 'NR==2{printf "%.2f%%\t\t", $3*100/$2 }')
sleep 3
sync  
echo 3 > /proc/sys/vm/drop_caches 
sync && sysctl -w vm.drop_caches=3 1>/dev/null 2>/dev/null 
sysctl -w vm.drop_caches=0 1>/dev/null 2>/dev/null 
sleep 2 
usoram=$(free -m | awk 'NR==2{printf "%.2f%%\t\t", $3*100/$2 }') 
ram1=$(free -h | grep -i mem | awk {'print $2'}) 
ram2=$(free -h | grep -i mem | awk {'print $4'}) 
ram3=$(free -h | grep -i mem | awk {'print $3'}) 
echo -e  "$barra"
echo -e "\033[1;33mMemoria RAM\033[0m" 
echo -e "\033[1;31m ° \033[1;37mTotal: \033[1;32m$ram1\033[0m"
echo -e "\033[1;31m ° \033[1;37mEn Uso:\033[1;32m$ram3\033[0m"
echo -e "\033[1;31m ° \033[1;37mLibre: \033[1;32m$ram2\033[0m" 
echo -e ""
echo -e "\033[1;37mMemória \033[1;32mRAM \033[1;37mdespués de la optimización: \033[1;36m" $usoram  
echo -e "$barra"
}
# SISTEMA DE SELECAO
selection_fun () {
local selection="null"
local range
for((i=0; i<=$1; i++)); do range[$i]="$i "; done
while [[ ! $(echo ${range[*]}|grep -w "$selection") ]]; do
echo -ne "\033[1;33mSelecione una Opcion: \033[1;37m" >&2
read selection
tput cuu1 >&2 && tput dl1 >&2
done
echo $selection
}
ssl_stunel () {
[[ $(mportas|grep stunnel4|head -1) ]] && {
echo -e "$barra"
echo -e "\033[1;33m Parando Stunnel"
echo -e "$barra"
fun_bar "apt-get purge stunnel4 -y"
echo -e "$barra"
echo -e "\033[1;33m Parado Com Sucesso!"
echo -e "$barra"
return 0
}
echo -e "\033[1;36m SSL Stunnel"
echo -e "$barra"
echo -e "\033[1;33m Selecione Uma Porta De Redirecionamento Interna"
echo -e "\033[1;33m Ou seja, uma Porta no Seu Servidor Para o SSL"
echo -e "$barra"
         while true; do
         echo -ne "\033[1;37m"
         read -p " Local-Port: " portx
         if [[ ! -z $portx ]]; then
             if [[ $(echo $portx|grep [0-9]) ]]; then
                [[ $(mportas|grep $portx|head -1) ]] && break || echo -e "\033[1;31m Porta Invalida"
             fi
         fi
         done
echo -e "$barra"
DPORT="$(mportas|grep $portx|awk '{print $2}'|head -1)"
echo -e "\033[1;33m Agora Presizamos Saber Qual Porta o SSL, Vai Escutar"
echo -e "$barra"
    while true; do
    read -p " Listen-SSL: " SSLPORT
    [[ $(mportas|grep $SSLPORT) ]] || break
    echo -e "\033[1;33m El puerto seleccionado ya se encuentra en uso"
    unset SSLPORT
	echo -e "$barra"
	return 0
    done
echo -e "$barra"
echo -e "\033[1;33m Instalando SSL"
echo -e "$barra"
fun_bar "apt-get install stunnel4 -y"
echo -e "cert = /etc/stunnel/stunnel.pem\nclient = no\nsocket = a:SO_REUSEADDR=1\nsocket = l:TCP_NODELAY=1\nsocket = r:TCP_NODELAY=1\n\n[stunnel]\nconnect = 127.0.0.1:${DPORT}\naccept = ${SSLPORT}" > /etc/stunnel/stunnel.conf
openssl genrsa -out key.pem 2048 > /dev/null 2>&1
(echo br; echo br; echo uss; echo speed; echo adm; echo ultimate; echo @admultimate)|openssl req -new -x509 -key key.pem -out cert.pem -days 1095 > /dev/null 2>&1
cat key.pem cert.pem >> /etc/stunnel/stunnel.pem
sed -i 's/ENABLED=0/ENABLED=1/g' /etc/default/stunnel4
service stunnel4 restart > /dev/null 2>&1
echo -e "$barra"
echo -e "\033[1;33m INSTALADO COM SUCESSO"
echo -e "$barra"
return 0
}
ports_ () {
portas_var="/tmp/portas"
porta_var="/tmp/portas2"
lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN" > $portas_var
while read port; do
var1=$(echo $port | awk '{print $1}')
var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
 if [ ! -e "$porta_var" ]; then
 echo -e "$var1 $var2" > $porta_var
 fi
 if [ "$(cat $porta_var | grep "$var1" | grep "$var2")" = "" ]; then
 echo -e "$var1 $var2" >> $porta_var
 fi
done < $portas_var
i=1
while true; do
a=$(sed -n "$i"p $porta_var | awk '{print $1}')
b=$(sed -n "$i"p $porta_var | awk '{print $2}')
[[ "$a" != "" ]] && texto="\033[1;31m ° \033[1;37m$a: \033[1;32m$b" || texto=""
[[ "$a" = "" ]] && break
i=$(($i+1))
c=$(sed -n "$i"p $porta_var | awk '{print $1}')
d=$(sed -n "$i"p $porta_var | awk '{print $2}')
[[ "$c" != "" ]] && texto_="\033[1;31m ° \033[1;37m$c: \033[1;32m$d" || texto_=""
[[ "$a" = "" ]] && break
i=$(($i+1))
echo -e "$texto $texto_"
done
rm $portas_var
rm $porta_var
} 
#FUNCOES
unset squid
unset dropbear
unset openvpn
unset stunel
unset shadow
unset telegran
unset socks
unset gettun
unset tcpbypass
unset webminn
unset ddos
[[ "$(ps x | grep "ultimatebot" | grep -v "grep")" != "" ]] && telegran="\033[1;32mOnline"
[[ -e /etc/adm-lite/sockson ]] && socks="\033[1;33m[\033[1;32mon\033[1;33m]"
[[ -e /etc/webmin/miniserv.conf ]] && webminn="\033[1;33m[\033[1;32mon\033[1;33m]"
[[ -e /etc/squid/squid.conf ]] && squid="\033[1;33m[\033[1;32mon\033[1;33m]"
[[ -e /etc/default/dropbear ]] && dropbear="\033[1;33m[\033[1;32mon\033[1;33m]"
[[ -e /etc/openvpn/server.conf ]] && openvpn="\033[1;33m[\033[1;32mconfigurado\033[1;33m]"
[[ $(mportas|grep stunnel4|head -1) ]] && stunel="\033[1;33m[\033[1;32mon\033[1;33m]"
[[ -e /etc/shadowsocks.json ]] && shadow="\033[1;33m[\033[1;32mon\033[1;33m]"
[[ -e /etc/adm-lite/gettun ]] && gettun="\033[1;33m[\033[1;32mon\033[1;33m]"
[[ -e /etc/adm-lite/edbypass ]] && tcpbypass="\033[1;33m[\033[1;32mon\033[1;33m]"
[[ -e /usr/local/ddos/ddos.conf ]] && ddos="\033[1;33m[\033[1;32mon\033[1;33m]"
IP=$(cat IPMENU)
_ons=$(ps -x | grep sshd | grep -v root | grep priv | wc -l)
[[ "$(cat /etc/SSHPlus/Exp)" != "" ]] && _expuser=$(cat /etc/SSHPlus/Exp) || _expuser="0"
[[ -e /etc/openvpn/openvpn-status.log ]] && _onop=$(grep -c "10.8.0" /etc/openvpn/openvpn-status.log) || _onop="0"
[[ -e /etc/default/dropbear ]] && _drp=$(ps aux | grep dropbear | grep -v grep | wc -l) _ondrp=$(($_drp - 1)) || _ondrp="0"
_onli=$(($_ons + $_onop + $_ondrp))
_ram=$(printf ' %-9s' "$(free -h | grep -i mem | awk {'print $2'})")
_usor=$(printf '%-8s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
_usop=$(printf '%-1s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
_core=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
_system=$(printf '%-14s' "$system")
_hora=$(printf '%(%H:%M:%S)T')
_onlin=$(printf '%-5s' "$_onli")
_userexp=$(printf '%-5s' "$_expuser")
_tuser=$(awk -F: '$3>=1000 {print $1}' /etc/passwd | grep -v nobody | wc -l)

#TEXTOS
[[ "$_os" = "" ]] && system[1]=$(echo $_system) && system[2]=$(echo ${system[1]} | awk '{print $1, $2}') && _os="\033[1;32m${system[2]}"
clear
echo -e "$barra"
echo -e "\E[47;1;31m               ❖ SCRIPT CONFVPS ❖                \E[0m"
echo -e "$barra"
echo -e "\033[1;31m ° \033[1;37mSU SISTEMA $_os"
echo -e "\033[1;31m ° \033[1;37mSu IP:\033[1;32m$IP"
echo -e "\033[1;31m ° \033[1;37mConectados:\033[1;32m $_onlin"
echo -e "\033[1;31m ° \033[1;37mExpirados:\033[1;32m $_userexp"
echo -e "\033[1;31m ° \033[1;37mTotal:\033[1;32m $_tuser"
echo -e "$barra"
ports_
echo -e "$barra"
echo -e "${cor[7]}[${cor[1]}01${cor[7]}] \033[0;32m>${cor[6]} MENU USUARIOS        ${cor[7]}[${cor[1]}14${cor[7]}] \033[0;32m>${cor[6]} SQUID $squid"
echo -e "${cor[7]}[${cor[1]}02${cor[7]}] \033[0;32m>${cor[6]} HERRAMIENTAS         ${cor[7]}[${cor[1]}15${cor[7]}] \033[0;32m>${cor[6]} DROPBEAR $dropbear"
echo -e "${cor[7]}[${cor[1]}03${cor[7]}] \033[0;32m>${cor[6]} GESTOR VPS           ${cor[7]}[${cor[1]}16${cor[7]}] \033[0;32m>${cor[6]} OPENVPN $openvpn"
echo -e "${cor[7]}[${cor[1]}04${cor[7]}] \033[0;32m>${cor[6]} ACTUALIZAR CONFVPS   ${cor[7]}[${cor[1]}17${cor[7]}] \033[0;32m>${cor[6]} SSL $stunel"
echo -e "${cor[7]}[${cor[1]}05${cor[7]}] \033[0;32m>${cor[6]} VER CONECTADOS       ${cor[7]}[${cor[1]}18${cor[7]}] \033[0;32m>${cor[6]} SHADOWNSNOCKS LIV $shadow"
echo -e "${cor[7]}[${cor[1]}06${cor[7]}] \033[0;32m>${cor[6]} BOT DE TELEGRAM      ${cor[7]}[${cor[1]}19${cor[7]}] \033[0;32m>${cor[6]} RENICIAR SERVICIOS"
echo -e "${cor[7]}[${cor[1]}07${cor[7]}] \033[0;32m>${cor[6]} PAYLOAD FUERZA BRUTA ${cor[7]}[${cor[1]}20${cor[7]}] \033[0;32m>${cor[6]} ARCHIVO ONLINE"
echo -e "${cor[7]}[${cor[1]}08${cor[7]}] \033[0;32m>${cor[6]} BUSCADOR DE HOST     ${cor[7]}[${cor[1]}00${cor[7]}] \033[0;32m>${cor[6]} SALIR"
echo -e "${cor[7]}[${cor[1]}09${cor[7]}] \033[0;32m>${cor[6]} TEST DE VELOCIDAD"
echo -e "${cor[7]}[${cor[1]}10${cor[7]}] \033[0;32m>${cor[6]} BANNER"
echo -e "${cor[7]}[${cor[1]}11${cor[7]}] \033[0;32m>${cor[6]} OPTIMIZAR VPS"
echo -e "${cor[7]}[${cor[1]}12${cor[7]}] \033[0;32m>${cor[6]} REMOVER CONFVPS"
echo -e "${cor[7]}[${cor[1]}13${cor[7]}] \033[0;32m>${cor[6]} AUTO INICIO $_autorun"
echo -e "$barra"
selection=$(selection_fun 20)
case $selection in
0 | 00) clear ; echo -ne "\033[1;32m ADIOS" ; exit ;;
1 | 01) source users-gen ;;
2 | 02) herramientas ;;
3 | 03) gestor_fun ;;
4 | 04) update ;;
5 | 05) source monitor-ssh ;;
6 | 06) telegran_bot ;;
7 | 07) source paysend.sh ;;
8 | 08)  monitor-ssh ;;
9 | 09)  source speedtest.py ;;
10) Banmer ;;
11) otimiz_server ;;
12) source unistaller-confvps ;;
13)
if [[ -e /etc/bash.bashrc-bakup ]]; then
mv -f /etc/bash.bashrc-bakup /etc/bash.bashrc
cat /etc/bash.bashrc | grep -v "/bin/adm" > /tmp/bash
mv -f /tmp/bash /etc/bash.bashrc
echo -e "$barra"
echo -e "${cor[2]} \033[1;32mREMOVED SUCESS!"
echo -e "$barra"
elif [[ -e /etc/bash.bashrc ]]; then
cat /etc/bash.bashrc|grep -v /bin/adm > /etc/bash.bashrc.2
echo '/bin/adm' >> /etc/bash.bashrc.2
cp /etc/bash.bashrc /etc/bash.bashrc-bakup
mv -f /etc/bash.bashrc.2 /etc/bash.bashrc
echo -e "$barra"
echo -e "${cor[2]} \033[1;32mAUTORUN START SUCESS!"
echo -e "$barra"
fi
sleep 2s
source menu
exit
;;
14) fun_barba  ;;
15) fun_dropbear ;;
16) source openvpn.sh ;;
17) ssl_stunel ;;
18) generadorbarba.sh ;;
19) serviciosfun ;;
20) apacheon.sh ;;
esac



echo -ne "$Ver"
read -p " ¡Enter, para volver!"
source confvps

